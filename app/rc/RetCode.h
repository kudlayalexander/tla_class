#pragma once

#include <array>

#include <ErrorCode/ErrorCode.h>

enum class RetCode : std::uint8_t {
    ROM_CONFIGURATION_CORRUPT,
    ROM_CONFIGURATION_LOAD_ERROR,
    ROM_CONFIGURATION_SAVE_ERROR,
    ROM_CONFIGURATION_RESTORE_ERROR,
    ROM_CONFIGURATION_SERIALIZE_ERROR,
    ROM_CONFIGURATION_FIELD_NOT_PRESENCE,
    ROM_CONFIGURATION_STRING_FIELD_LENGTH_TOO_BIG,
    ROM_CONFIGURATION_FIELD_VALUE_RANGE_VIOLATION,
    ROM_CONFIGURATION_UNEXPECTED_FIELD_VALUE,
    ROM_CONFIGURATION_INCORRECT_FIELD_TYPE,
    ROM_CONFIGURATION_CONTAINER_SIZE_EXCEED,

    BLACKBOX_NO_ITEMS,

    WIALON_PACKET_CRC_CHECK_FAILED,
    WIALON_PACKET_INVALID_STRUCTURE,
    WIALON_PACKET_INCORRECT_TYPE,
    WIALON_PACKET_INVALID_ARGUMENT,
    WIALON_PACKET_CONTAINER_SIZE_EXCEED,
    WIALON_PACKET_PARAMETER_IS_EMPTY,
    WIALON_PACKET_PARAMETER_SIZE_TOO_BIG,

    WIALON_CONNECTION_MESSAGE_CACHED,
    WIALON_CONNECTION_MESSAGE_SEND_ERROR,

    WIALON_NAVIGATION_DATA_PRODUCER_INVALID_NAV_INFO,
    WIALON_TELEMETRY_CLIENT_MAX_SUBS_COUNT_REACH,

    WIALON_SMC_IO_ERROR,

    WIALON_BLACKBOX_MESSAGE_SIZE_TOO_BIG,

    MAX_VALUE
};

template <typename T>
using CustomError = ErrorCode::CustomError<T>;

using Status = ErrorCode::Status;

static boost::leaf::error_id newError(RetCode rc) noexcept {
    return boost::leaf::new_error(rc);
}